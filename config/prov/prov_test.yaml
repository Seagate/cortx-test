system:
  offline: "offline"
  stopped: "Stopped"
  active: "active"
services:
  all:
    - "firewalld"
    - "hare-consul-agent.service"
    - "elasticsearch.service"
    - "statsd.service"
    - "rsyslog.service"
    - "haproxy.service"
    - "slapd.service"
    - "kafka-zookeeper.service"
    - "salt-master.service"
    - "salt-minion.service"
    - "lnet.service"
  multinode:
    - "glusterd.service"
  hw_specific:
    - "multipathd.service"
    - "scsi-network-relay.service"
service_ports:
  csm: [ "28100" ]
  dns: [ "53" ]
  elasticsearch: [ "9200", "9300" ]
  https: [ "443" ]
  ntp: [ "123" ]
  ldap: [ "389" ]
  redis: [ "6379" ]
  salt-master: [ "4505", "4506" ]
  smtp: [ "25" ]
  s3: [ "9443" ]
build_url: "http://cortx-storage.colo.seagate.com/releases/cortx/github/{0}/centos-{1}/{2}/"
build_iso: "http://cortx-storage.colo.seagate.com/releases/cortx/github/{0}/centos-{1}/{2}/iso/cortx-2.0.0-{3}-upgrade.iso"
build_sig: "http://cortx-storage.colo.seagate.com/releases/cortx/github/{0}/centos-{1}/{2}/iso/cortx-2.0.0-{3}-upgrade.iso.sig"
build_key: "http://cortx-storage.colo.seagate.com/releases/cortx/github/{0}/centos-{1}/{2}/cortx_iso/RPM-GPG-KEY-Seagate"
iso_repo: "cortx-2.0.0-{}-upgrade.iso"
sig_repo: "cortx-2.0.0-{}-upgrade.iso.sig"
key_repo: "RPM-GPG-KEY-Seagate"
key1_repo: "RPM-GPG-KEY-Seagate.gpg"
build_def: "last_successful_prod"
cluster_start_msg: "Cluster start operation performed"
confstore_list: [ "host", "enclosure_id", "machine_id", "cluster_id" ]

single-node:
  prereq:
    count: 2
    os_release: "CentOS Linux release 7.8.2003 (Core)"
    kernel: "3.10.0-1127.el7.x86_64"
  deploy:
    job_name: "QA-R2-Single-Node-Deployment"
    success_msg: "SUCCESS"

3-node-vm:
  prereq:
    min_disks: 4
    os_release: "CentOS Linux release 7.8.2003 (Core)"
    kernel: "3.10.0-1127.el7.x86_64"
    cpu_cores: 4
    memory: 8
    prvsnr_version: 0.36.0
  config_template: "config/prov/three_node_config.ini"
  config_path_local: "prov_config.ini"
  config_path_remote: "/root/config.ini"
  setup-type: "3_node"
  cluster_start_delay: 180

system_ntp:
  ntp_data: [ 'time_server:', 'time_zone:' ]
  timeserver: [ '10.30.127.102', 'time.seagate.com' ]
  timezone: [ 'Europe/Sofia', 'Iceland', 'Europe/Dublin', 'Europe/Jersey', 'Portugal', 'Europe/Amsterdam' ]

deploy_ff:
  deployment_template: "config/prov/three_node_config.ini"
  build_url: "http://cortx-storage.colo.seagate.com/releases/cortx/github/{0}/{1}/{2}/"
  prereq:
    min_disks: 4
    os_release: [ "CentOS Linux release 7.9.2009 (Core)","CentOS Linux release 7.8.2003 (Core)" ]
    kernel: [ "3.10.0-1160.el7.x86_64","3.10.0-1127.el7.x86_64" ]
    cpu_cores: 4
    memory: 8
  network_trans: "lnet"
  security_path: "/opt/seagate/cortx/provisioner/srv/components/misc_pkgs/ssl_certs/files/stx.pem"
  feature_config:
    "'cortx>software>s3>service>instances'": 1
    "'cortx>software>s3>io>max_units'": 8
    "'cortx>software>motr>service>client_instances'": 2
  dns_servers: "10.230.240.51 10.230.240.52"
  search_domains: "colo.seagate.com cortx.colo.seagate.com"
  firewall_url: "yaml:///opt/seagate/cortx_configs/firewall_config.yaml"
  storage_set_name: "storage-set-1"
  cluster_start_msg: "Cluster start operation performed"
  setup-type: "3_node"
  cluster_start_delay: 180
  gateway_lco: "10.230.240.1"
  gateway: "0.0.0.0"
  per_step_delay: 30
  encl_name: "enclosure1"
  lr_sign: "HP1_5U84"
  bmc_username: "admin"
  bmc_password: "admin"

post_deployment_steps:
  csm_default_user_name: "cortxadmin"
  csm_default_pswd: "vTevsWHDYUeKielyECfjmCcQxfcQLBuYZ9uqTiXD0Xc="
  s3user_name: 's3user'
  s3user_email: 's3user@seagate.com'
  s3user_pswd: 'xPUfs2X7OhXgirxG6au/T9FHd+q7mWHYo3P2OS7KlWs='

k8s_cluster_deploy:
  job_name: "setup-kubernetes-cluster"
  cortx_job_name: "deploy-cortx-k8-cluster"
  jenkins_url: "https://eos-jenkins.colo.seagate.com/job/Cortx-kubernetes/"
  auth_token: "$eagate@123"

k8s_cortx_deploy:
  prereq:
    min_disks: 8
    os_release: [ "CentOS Linux release 7.9.2009 (Core)" ]
    kernel: [ "3.10.0-1160.el7.x86_64" ]
    cpu_cores: 8
    memory: 16
  node_count: 15
  clone_dir: "deploy-scripts"
  local_path_prov: "/mnt/fs-local-volume"
  mnt_path: "/mnt/fs-local-volume/local-path-provisioner/"
  3rd_party_data_dir: "/var/data/3rd-party/"
  3rd_party_dir: "/etc/3rd-party/"
  log_path: "/etc/cortx/log"
  custom_log_path: "/etc/cortx/custom/log"
  s3_max_start_timeout: 240
  s3_instances_per_node: 2
  container_group_size: 1
  sleep_time: 60
  service_delay: 120
  service_delay_scale: 360
  namespace: "cortx"
  max_size_namespace: 18
  max_char_limit: 19
  https_protocol: "https://$ip"
  http_protocol: "http://$ip"
  https_port: 30443
  http_port: 30080
  control_port_https: 31169
  iface: "eth1"
  service_type: "LoadBalancer"
  lb_count: 1
  deployment_type: "standard"
  data_disk_size: "20Gi"
  metadata_disk_size: "20Gi"
  git_k8_repo: "https://github.com/Seagate/cortx-k8s.git"
  git_k8_repo_file: "https://raw.githubusercontent.com/Seagate/cortx-k8s/$tag/k8_cortx_cloud/$file"
  k8s_dir: "/root/deploy-scripts/k8_cortx_cloud/"
  prov_branch: "cortx-test"
  upgrade_type_cold: "cold"
  upgrade_type_rolling: "rolling"
  granular_type: "all"
  upgrade_start: "start"
  upgrade_status: "status"
  upgrade_suspend: "suspend"
  upgrade_resume: "resume"
  new_file_path: "solution.example.yaml"
  solution_file: "solution.yaml"
  deploy_file: "deploy-cortx-cloud.sh"
  report_file: "deployment_report.csv"
  log_file: "deployment.log"
  rgw_rpm: "cortx-rgw"
  status_log_file: "status.log"
  pre_req_log: "pre_req_log.log"
  pre_check_log: "pre_check.log"
  deployment_type_data: "data-only"
  client_instance: 0
  data_client_instance: 1
  cluster_yaml_path: "/etc/cortx/solution/cluster.yaml"
  cluster_conf_path: "/etc/cortx/cluster.conf"
  third_party_images:
    consul: 'ghcr.io/seagate/consul:1.11.4'
    kafka: 'ghcr.io/seagate/kafka:3.0.0-debian-10-r97'
    zookeeper: 'ghcr.io/seagate/zookeeper:3.8.0-debian-10-r9'
    rancher: 'ghcr.io/seagate/local-path-provisioner:v0.0.20'
    busybox: 'ghcr.io/seagate/busybox:latest'
  cortx_images_key: [ 'cortxcontrol', 'cortxdata', 'cortxserver',
                      'cortxha', 'cortxclient' ]
  password:
    csm_auth_admin_secret: 'hPknkG1peaPHKdEdL5xCV4eguDl9Fgq1C513lpIKzFc='
    csm_mgmt_admin_secret: '50e4j0exZRRpDTkh+t5wuktLv+SmxpwL//3uamQCCM0='
  setup_k8s_cluster_flag: "True"
  setup_client_config_flag: "True"
  run_basic_s3_io_flag: "True"
  run_s3bench_workload_flag: "True"
  destroy_setup_flag: "True"
  cortx_cluster_deploy_flag: "True"
  deploy_ha_timeout_key: "CORTX_DEPLOY_HA_TIMEOUT"
  deploy_ha_timeout_val: 1000
  timeout:
    pre-req: 120
    deploy: 7200
    destroy: 900
    status: 120
    upgrade: 3600
  thirdparty_resource:
    server:   #consul_server
      requests:
        mem: '200Mi'
        cpu: '200m'
      limits:
        mem: '500Mi'
        cpu: '500m'
    client:  #consul_client
      requests:
        mem: '200Mi'
        cpu: '200m'
      limits:
        mem: '500Mi'
        cpu: '500m'
    kafka:
      requests:
        mem: '1Gi'
        cpu: '250m'
      limits:
        mem: '2Gi'
        cpu: '1000m'
    zookeeper:
      requests:
        mem: '256Mi'
        cpu: '250m'
      limits:
        mem: '512Mi'
        cpu: '500m'
  cortx_resource:
    hax:
      requests:
        mem: '128Mi'
        cpu: '250m'
      limits:
        mem: '2Gi'
        cpu: '1000m'
    motr:
      requests:
        mem: '1Gi'
        cpu: '250m'
      limits:
        mem: '2Gi'
        cpu: '1000m'
    confd:
      requests:
        mem: '128Mi'
        cpu: '250m'
      limits:
        mem: '512Mi'
        cpu: '500m'
    rgw:
        requests:
          mem: '128Mi'
          cpu: '250m'
        limits:
          mem: '2Gi'
          cpu: '2000m'
    agent:
      requests:
        mem: '128Mi'
        cpu: '250m'
      limits:
        mem: '256Mi'
        cpu: '500m'
    fault_tolerance:
      requests:
        mem: '128Mi'
        cpu: '250m'
      limits:
        mem: '1Gi'
        cpu: '500m'
    health_monitor:
      requests:
        mem: '128Mi'
        cpu: '250m'
      limits:
        mem: '1Gi'
        cpu: '500m'
    k8s_monitor:
      requests:
        mem: '128Mi'
        cpu: '250m'
      limits:
        mem: '1Gi'
        cpu: '500m'
test_basic_io:
  io_upper_limits:
    Kb: 130
    Mb: 50
config_metallb:
  check_ARP: 'kubectl get configmap kube-proxy -n kube-system -o yaml | \
                    sed -e "s/strictARP: false/strictARP: true/" | \
                    kubectl diff -f - -n kube-system'
  enable_strict_ARP: 'kubectl get configmap kube-proxy -n kube-system -o yaml | \
                  sed -e "s/strictARP: false/strictARP: true/" | \
                  kubectl apply -f - -n kube-system'
  apply_manifest_namespace: 'kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/namespace.yaml'
  apply_manifest_metallb: 'kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/metallb.yaml'
  check_namespace: 'kubectl get all -n metallb-system'
  config_path: 'config/prov/metallb_config.yaml'
  new_config_file: 'metallb_config.yaml'
  remote_path: '/root/metallb_config.yaml'
  apply_config: 'kubectl apply -f metallb_config.yaml'

