pipeline {
    agent {
        label auto-awitch-ssc-vm-rhev4
    }

    environment {
        AWS_ACCESS_KEY_ID     = ''
        AWS_SECRET_ACCESS_KEY = ''
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
        timestamps()

    }

    triggers {

        cron('H 23 * * *')
    }

    parameters {
        string(name: 'Branch', defaultValue: 'dev', description: 'Branch name of cortx-test', trim: true)
        string(name: 'TestPlanNumber', defaultValue: 'TEST-18383', description: 'Master Test plan number to clone', trim: true)
        string(name: 'SetupName', description: 'Name of target setup mentioned in database', trim: true)
        text(name: 'DESC', description: 'This job triggers deploy setup and runs Cortx-test TE')
        string(name: 'Nodes_In_Target', defaultValue: '3', description: 'Number of nodes in target: 3 or 3N', trim: true)
        string(name: 'vm_list', defaultValue: '', description: 'List of VMs for 3 Node Setup', trim: true)
        string(name: 'm_vip', defaultValue: '', description: 'Mgmt VIP', trim: true)
        string(name: 'Build', description: 'Build number of target', trim: true)
        string(name: 'Build_Path', description: '3 Node Build Path', trim: true)
        string(name: 'Build_Type', defaultValue: 'stable', description: 'Branch name from which build is cut stable/main', trim: true)
        credentials(
                credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
                defaultValue: '',
                description: 'JIRA Credentials.',
                name: 'JIRA_CRED',
                required: true)
        booleanParam(name: 'DB_Update', description: 'Tick this if you want to push test execution data to database')
        booleanParam(name: 'Sequential_Execution', description: 'Tick this if you want to have sequential execution')
        string(name: 'Process_Cnt_Parallel_Exe', defaultValue: '2', description: 'If Sequential Execution is not selected, then provide number of parallel process to run.', trim: true)

    }

    stages {
        stage('Checkout cortx-test on client vm') {
            when { expression { true } }
            steps {
                script {
                    step([$class: 'WsCleanup'])
                    dir('cortx-test'){
                        checkout([$class: 'GitSCM', branches: [[name: "${Branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'AuthorInChangelog'], [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'cortx-admin-github', url: 'https://github.com/Seagate/cortx-test.git']]])
                        sh './ci_tools/client_setup.sh'
                    }
                    sh "pwd"
                }

            }
        }
        stage('Multi Node Deploy and Health Check') {
            steps {
                ansiColor('xterm') {
                    echo "Executing 3 Node Deployment and Health Check on setup."
                }
                dir('cortx-test') {
                    retry(3) { // Retries x number of times until its successful

                        sh 'cd "${WORKSPACE}/cortx-test/"'
                        sh 'python3.7 scripts/jenkins_job/trigger_jenkins_job.py -l ${vm_list} -p seagate -b ${Build} -i ${m_vip}'
                        sh 'wget -N https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm'
                        sh 'yum install -y google-chrome-stable_current_x86_64.rpm'
                        sh 'wget -N https://chromedriver.storage.googleapis.com/91.0.4472.19/chromedriver_linux64.zip'
                        sh 'yum -y install unzip'
                        sh 'unzip chromedriver_linux64.zip'
                        sh 'chmod 777 chromedriver'
                        sh 'mv chromedriver $WORKSPACE/cortx-test/venv/bin'

                    }
                    script {
                        sh label: '', script: '''source venv/bin/activate
python3.7 -m unittest scripts.jenkins_job.cortx_pre_onboarding.CSMBoarding.test_preboarding
python3.7 -m unittest scripts.jenkins_job.cortx_pre_onboarding.CSMBoarding.test_onboarding
deactivate
'''
                        sh 'cd "${WORKSPACE}/cortx-test/scripts/s3_tools/"'
                        sh 'make clean'
                        sh 'make configure-tools'

                    }
                }
            }
        }
        stage('Cortx-Text Automation Trigger') {
            steps {
                script {
                    def name = "${params.TestPlanNumber}"
                    echo "Executing $name"
                }
                catchError {
                    sh 'python3.7 setup_switch.py'

                }
                echo currentBuild.result
            }
        }

    }


    post {
        success {
            echo "The pipeline ${currentBuild.fullDisplayName} completed successfully."
        }
        failure {
            mail to: 'sarang.sawant@seagate.com',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Something is wrong with ${env.BUILD_URL}"
        }

    }
}